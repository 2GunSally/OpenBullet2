@page "/"
@using Helpers
@using System.Threading
@using OpenBullet2.Services
@using OpenBullet2.Shared.Forms 
@using System.Globalization
@inject MetricsService Metrics
@inject AuthenticationStateProvider Auth
@inject NavigationManager Nav
@inject Microsoft.Extensions.Localization.IStringLocalizer<Index> Loc
@inject IModalService Modal
@attribute [Authorize(Roles = "Admin,Guest")]

<h2 style="margin-bottom: 20px;">@Loc["WelcomeMessage"]</h2>

<table class="table">
    <tbody>
        <AuthorizeView>
            <Authorized>
                <tr>
                    <th scope="row">@Loc["AuthenticatedAs"]</th>
                    <td>
                        @context.User.Identity.Name
                        <button class="btn-sm btn-primary ml-3" @onclick="Logout">Logout</button>
                    </td>
                </tr>
            </Authorized>
        </AuthorizeView>
        <tr>
            <th scope="row">@Loc["LocalTime"]</th>
            <td>@Metrics.ServerTime.ToString()</td>
        </tr>
        <tr>
            <th scope="row">@Loc["WebserverUptime"]</th>
            <td>@Metrics.UpTime.ToReadableString()</td>
        </tr>
        <tr>
            <th scope="row">@Loc["OperatingSystem"]</th>
            <td>@Metrics.OS</td>
        </tr>
        <tr>
            <th scope="row">@Loc["CurrentWorkingDirectory"]</th>
            <td>@Metrics.CWD</td>
        </tr>
        <tr>
            <th scope="row">@Loc["CPUUsage"]</th>
            <td>@(Metrics.CpuUsage.ToString("0.##", CultureInfo.InvariantCulture)) %</td>
        </tr>
        <tr>
            <th scope="row">@Loc["MemoryUsage"]</th>
            <td>@BytesToString(Metrics.MemoryUsage)</td>
        </tr>
        <tr>
            <th scope="row">@Loc["BuildNumber"]</th>
            <td>@Metrics.BuildNumber (@Metrics.BuildDate.ToString())</td>
        </tr>
    </tbody>
</table>

@code {
    protected override void OnInitialized()
    {
        StartPeriodicRefresh();
    }

    private void StartPeriodicRefresh()
    {
        var timer = new Timer(new TimerCallback(async _ =>
        {
            await InvokeAsync(StateHasChanged);
        }), null, 1000, 1000);

        var cpuTimer = new Timer(new TimerCallback(async _ =>
        {
            await Metrics.UpdateCpuUsage();
        }), null, 500, 500);
    }

    private string BytesToString(long byteCount)
    {
        string[] suf = { "B", "KB", "MB", "GB", "TB", "PB", "EB" }; //Longs run out around EB
        if (byteCount == 0)
            return "0" + $" {suf[0]}";
        long bytes = Math.Abs(byteCount);
        int place = Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));
        double num = Math.Round(bytes / Math.Pow(1024, place), 1);
        return (Math.Sign(byteCount) * num).ToString("0.##", CultureInfo.InvariantCulture) + $" {suf[place]}";
    }

    void ChangeLanguage()
    {
        Modal.Show<CultureSelector>("Choose your language");
    }

    private async Task Logout()
    {
        await ((OpenBullet2.Auth.OBAuthenticationStateProvider)Auth).Logout();
        Nav.NavigateTo("/");
    }
}