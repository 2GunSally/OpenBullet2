@page "/config/edit/settings"
@using RuriLib.Models.Proxies
@using RuriLib.Models.Data
@using RuriLib.Models 
@using RuriLib.Models.Configs 

<h1>General</h1>
<EditForm Model="settings.GeneralSettings">

    <label>Suggested amount of Bots</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.SuggestedBots" />

    <label>CPM Limit (0 for no limit)</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.MaximumCPM" />

    <label>Save empty captures too</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.SaveEmptyCaptures" />
    <br />

    <label>Statuses for which the bot will continue / stop</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="continueStatuses" Selected="stopStatuses" />
</EditForm>

<h1>Requests</h1>
<EditForm Model="settings.RequestsSettings">
    <label>Ignore response errors</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.RequestsSettings.IgnoreResponseErrors" />
    <br />
</EditForm>

<h1>Proxies</h1>
<EditForm Model="settings.ProxySettings">
    <label>Use proxies</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.ProxySettings.UseProxies" />
    <br />

    <label>Maximum uses per proxy (0 is infinite)</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.ProxySettings.MaxUsesPerProxy" />

    <label>Ban loop evasion a.k.a. after how many BAN statuses the data line should be marked as TOCHECK and the proxy should be banned (0 is infinite)</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.ProxySettings.BanLoopEvasion" />

    <label>Ban the proxy when the bot ends with one of these statuses</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="proxyBanStatuses" Selected="proxyContinueStatuses" />

    <label>Allowed proxy types</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="allowedProxyTypes" Selected="unallowedProxyTypes" />
</EditForm>

<h1>Data</h1>
<EditForm Model="settings.DataSettings">
    <label>Allowed wordlist types</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="allowedWordlistTypes" Selected="unallowedWordlistTypes" />

    <label>URL Encode data after slicing</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.DataSettings.UrlEncodeDataAfterSlicing" />
    <br />

    <label>Data Rules</label>
    <br />
    <div class="list-group list-group-horizontal">
        <button type="button" class="btn-sm btn-success" @onclick="@(() => settings.DataSettings.DataRules.Add(new DataRule("", ".*")))">
            <span class="oi oi-plus"></span>
            Add Blank
        </button>
        <button type="button" class="btn-sm btn-primary"
                @onclick="@(() => showRegexHelper = !showRegexHelper)">
            <span class="oi oi-plus"></span> Toggle Regex Helper
        </button>
        <button type="button" class="btn-sm btn-danger"
                @onclick="@(() => settings.DataSettings.DataRules.Clear())">
            <span class="oi oi-x"></span> Clear
        </button>
    </div>
    @if (showRegexHelper)
    {
        <RegexHelper BuiltRegex="@((regex) => settings.DataSettings.DataRules.Add(new DataRule("", regex)))" />
    }
    <div class="container-fluid" style="margin-top: 15px;">
        @foreach (var rule in settings.DataSettings.DataRules)
        {
            <div class="row" style="margin-bottom: 15px;">
                <div class="col-2">
                    <label>Slice Name</label>
                    <InputText @bind-Value="rule.SliceName" />
                </div>
                <div class="col-9">
                    <label>Regex to match</label>
                    <InputText @bind-Value="rule.RegexToMatch" />
                </div>
                <div class="col-1">
                    <button type="button" class="btn-sm btn-primary" @onclick="@(() => settings.DataSettings.DataRules.Remove(rule))">
                        <span class="oi oi-minus"></span>
                        Remove
                    </button>
                </div>
            </div>
        }
    </div>
</EditForm>

<h1>Inputs</h1>
<EditForm Model="settings.InputSettings">
    <p>
        Custom inputs are a way to define some values directly at runtime. The users of the config will receive some popups when they start
        a job and their answer will be inserted as a variable of type <i>string</i> that you can use as you please.
    </p>
    <label>Custom inputs</label>
    <br />
    <div class="list-group list-group-horizontal">
        <button type="button" class="btn-sm btn-success" @onclick="@(() => settings.InputSettings.CustomInputs.Add(new CustomInput()))">
            <span class="oi oi-plus"></span> Add
        </button>
        <button type="button" class="btn-sm btn-danger"
                @onclick="@(() => settings.InputSettings.CustomInputs.Clear())">
            <span class="oi oi-x"></span> Clear
        </button>
    </div>
    <div class="container-fluid" style="margin-top: 15px;">
        @foreach (var input in settings.InputSettings.CustomInputs)
        {
            <div class="row" style="margin-bottom: 15px;">
                <div class="col-4">
                    <label>Description (question for the user)</label>
                    <InputText @bind-Value="input.Description" />
                </div>
                <div class="col-3">
                    <label>Variable Name</label>
                    <InputText @bind-Value="input.VariableName" />
                </div>
                <div class="col-4">
                    <label>Default Answer</label>
                    <InputText @bind-Value="input.DefaultAnswer" />
                </div>
                <div class="col-1">
                    <button type="button" class="btn-sm btn-primary" @onclick="@(() => settings.InputSettings.CustomInputs.Remove(input))">
                        <span class="oi oi-minus"></span>
                        Remove
                    </button>
                </div>
            </div>
        }
    </div>
</EditForm>

<h1>Selenium</h1>
<EditForm Model="settings.SeleniumSettings">
    <label>Always open the browser at the start</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.AlwaysOpenBrowser" />
    <br />

    <label>Quit the browser when the bot ends with one of these statuses</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="quitBrowserStatuses" Selected="dontQuitBrowserStatuses" />

    <label>Disable notifications from webpages</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.DisableNotifications" />
    <br />

    <label>Command line arguments (e.g. --headless --incognito)</label>
    <InputText style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.CommandLineArgs" />

    <label>User Agent (default if empty)</label>
    <InputText style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.UserAgent" />

    <label>Random User Agent</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.UseRandomUserAgent" />
    <br />
</EditForm>

@code {
    ConfigSettings settings;
    List<string> continueStatuses;
    List<string> stopStatuses;
    List<string> proxyContinueStatuses;
    List<string> proxyBanStatuses;
    List<ProxyType> allowedProxyTypes;
    List<ProxyType> unallowedProxyTypes;
    List<string> allowedWordlistTypes;
    List<string> unallowedWordlistTypes;
    List<string> quitBrowserStatuses;
    List<string> dontQuitBrowserStatuses;
    private bool showRegexHelper = false;

    protected override void OnInitialized()
    {
        settings = Static.Config.Settings;

        // HACK: I tried binding directly to lists but it would spit out double the amount of values when deserializing the json
        // for some reason so this approach is working but it's not the best
        continueStatuses = settings.GeneralSettings.ContinueStatuses.ToList();
        stopStatuses = GetStatuses()
            .Where(s => !continueStatuses.Contains(s)).ToList();

        proxyBanStatuses = settings.ProxySettings.BanProxyStatuses.ToList();
        proxyContinueStatuses = GetStatuses()
            .Where(s => !proxyBanStatuses.Contains(s)).ToList();

        allowedProxyTypes = settings.ProxySettings.AllowedProxyTypes.ToList();
        unallowedProxyTypes = Enum.GetValues(typeof(ProxyType))
            .Cast<ProxyType>().Where(t => !allowedProxyTypes.Contains(t)).ToList();

        allowedWordlistTypes = settings.DataSettings.AllowedWordlistTypes.ToList();
        unallowedWordlistTypes = Static.Environment.WordlistTypes
            .Select(w => w.Name)
            .Where(w => !allowedWordlistTypes.Contains(w)).ToList();

        quitBrowserStatuses = settings.SeleniumSettings.QuitBrowserStatuses.ToList();
        dontQuitBrowserStatuses = GetStatuses()
            .Where(s => !quitBrowserStatuses.Contains(s)).ToList();
    }

    void OnSelectionChanged(object value)
    {
        // HACK: Set all here since I don't want to make 1 method for each one
        settings.GeneralSettings.ContinueStatuses = continueStatuses.ToArray();
        settings.ProxySettings.BanProxyStatuses = proxyBanStatuses.ToArray();
        settings.ProxySettings.AllowedProxyTypes = allowedProxyTypes.ToArray();
        settings.DataSettings.AllowedWordlistTypes = allowedWordlistTypes.ToArray();
        settings.SeleniumSettings.QuitBrowserStatuses = quitBrowserStatuses.ToArray();
    }

    private string[] GetStatuses()
    {
        return (new string[]
        {
            "SUCCESS", "NONE", "FAIL", "RETRY", "BAN", "ERROR"
            }).Concat(Static.Environment.CustomStatuses.Select(s => s.Name)).ToArray();
    }
}
