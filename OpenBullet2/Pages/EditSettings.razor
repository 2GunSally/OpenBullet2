@page "/config/edit/settings"
@using RuriLib.Models.Proxies
@using RuriLib.Models.Data
@using RuriLib.Models
@using RuriLib.Models.Configs
@using OpenBullet2.Services
@using RuriLib.Services
@using OpenBullet2.Helpers
@inject ConfigService ConfigService
@inject RuriLibSettingsService RuriLibSettings
@inject NavigationManager Nav
@inject Microsoft.Extensions.Localization.IStringLocalizer<EditSettings> Loc

<h1>@Loc["General"]</h1>
<EditForm Model="settings.GeneralSettings">

    <label>@Loc["SuggestedBots"]</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.SuggestedBots" />

    <label>@Loc["CPMLimit"]</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.MaximumCPM" />

    <label>@Loc["SaveEmptyCaptures"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.SaveEmptyCaptures" />
    <br />

    <label>@Loc["ContinueStopStatuses"]</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="continueStatuses" Selected="stopStatuses" />
</EditForm>

<h1>@Loc["Requests"]</h1>
<EditForm Model="settings.RequestsSettings">
    <label>@Loc["IgnoreResponseErrors"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.RequestsSettings.IgnoreResponseErrors" />
    <br />
</EditForm>

<h1>@Loc["Proxies"]</h1>
<EditForm Model="settings.ProxySettings">
    <label>@Loc["UseProxies"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.ProxySettings.UseProxies" />
    <br />

    <label>@Loc["MaxUsesPerProxy"]</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.ProxySettings.MaxUsesPerProxy" />

    <label>@Loc["BanLoopEvasion"]</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.ProxySettings.BanLoopEvasion" />

    <label>@Loc["BanStatuses"]</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="proxyBanStatuses" Selected="proxyContinueStatuses" />

    <label>@Loc["AllowedProxyTypes"]</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="allowedProxyTypes" Selected="unallowedProxyTypes" />
</EditForm>

<h1>@Loc["Data"]</h1>
<EditForm Model="settings.DataSettings">
    <label>@Loc["AllowedWordlistTypes"]</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="allowedWordlistTypes" Selected="unallowedWordlistTypes" />

    <label>@Loc["UrlEncodeAfterSlicing"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.DataSettings.UrlEncodeDataAfterSlicing" />
    <br />

    <label>@Loc["DataRules"]</label>
    <br />
    <div class="list-group list-group-horizontal">
        <button type="button" class="btn-sm btn-success" @onclick="@(() => settings.DataSettings.DataRules.Add(new DataRule("", ".*")))">
            <span class="oi oi-plus"></span>
            @Loc["AddBlank"]
        </button>
        <button type="button" class="btn-sm btn-primary"
                @onclick="@(() => showRegexHelper = !showRegexHelper)">
            <span class="oi oi-plus"></span> @Loc["ToggleRegexHelper"]
        </button>
        <button type="button" class="btn-sm btn-danger"
                @onclick="@(() => settings.DataSettings.DataRules.Clear())">
            <span class="oi oi-x"></span> @Loc["Clear"]
        </button>
    </div>
    @if (showRegexHelper)
    {
        <RegexHelper BuiltRegex="@((regex) => settings.DataSettings.DataRules.Add(new DataRule("", regex)))" />
    }
    <div class="container-fluid" style="margin-top: 15px;">
        @foreach (var rule in settings.DataSettings.DataRules)
        {
            <div class="row" style="margin-bottom: 15px;">
                <div class="col-2">
                    <label>@Loc["SliceName"]</label>
                    <InputText @bind-Value="rule.SliceName" />
                </div>
                <div class="col-9">
                    <label>@Loc["RegexToMatch"]</label>
                    <InputText @bind-Value="rule.RegexToMatch" />
                </div>
                <div class="col-1">
                    <button type="button" class="btn-sm btn-primary" @onclick="@(() => settings.DataSettings.DataRules.Remove(rule))">
                        <span class="oi oi-minus"></span>
                        @Loc["Remove"]
                    </button>
                </div>
            </div>
        }
    </div>
</EditForm>

<h1>@Loc["Inputs"]</h1>
<EditForm Model="settings.InputSettings">
    <p>
        @Loc["InputsDescription"]
    </p>
    <label>@Loc["CustomInputs"]</label>
    <br />
    <div class="list-group list-group-horizontal">
        <button type="button" class="btn-sm btn-success" @onclick="@(() => settings.InputSettings.CustomInputs.Add(new CustomInput()))">
            <span class="oi oi-plus"></span> @Loc["Add"]
        </button>
        <button type="button" class="btn-sm btn-danger"
                @onclick="@(() => settings.InputSettings.CustomInputs.Clear())">
            <span class="oi oi-x"></span> @Loc["Clear"]
        </button>
    </div>
    <div class="container-fluid" style="margin-top: 15px;">
        @foreach (var input in settings.InputSettings.CustomInputs)
        {
            <div class="row" style="margin-bottom: 15px;">
                <div class="col-4">
                    <label>@Loc["InputDescription"]</label>
                    <InputText @bind-Value="input.Description" />
                </div>
                <div class="col-3">
                    <label>@Loc["VariableName"]</label>
                    <InputText @bind-Value="input.VariableName" />
                </div>
                <div class="col-4">
                    <label>@Loc["DefaultAnswer"]</label>
                    <InputText @bind-Value="input.DefaultAnswer" />
                </div>
                <div class="col-1">
                    <button type="button" class="btn-sm btn-primary" @onclick="@(() => settings.InputSettings.CustomInputs.Remove(input))">
                        <span class="oi oi-minus"></span>
                        @Loc["Remove"]
                    </button>
                </div>
            </div>
        }
    </div>
</EditForm>

<h1>@Loc["Selenium"]</h1>
<EditForm Model="settings.SeleniumSettings">
    <label>@Loc["AlwaysOpenBrowser"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.AlwaysOpenBrowser" />
    <br />

    <label>@Loc["QuitBrowserStatuses"]</label>
    <MultipleSelector SelectionChanged="OnSelectionChanged" NotSelected="quitBrowserStatuses" Selected="dontQuitBrowserStatuses" />

    <label>@Loc["DisableWebpagesNotifications"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.DisableNotifications" />
    <br />

    <label>@Loc["SeleniumCommandLineArguments"]</label>
    <InputText style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.CommandLineArgs" />

    <label>@Loc["SeleniumUserAgent"]</label>
    <InputText style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.UserAgent" />

    <label>@Loc["RandomUserAgent"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SeleniumSettings.UseRandomUserAgent" />
    <br />
</EditForm>

<button class="btn btn-warning" style="margin: 10px 0;" @onclick="RestoreDefaults">@Loc["RestoreDefaults"]</button>

@code {
    ConfigSettings settings;
    List<string> continueStatuses;
    List<string> stopStatuses;
    List<string> proxyContinueStatuses;
    List<string> proxyBanStatuses;
    List<ProxyType> allowedProxyTypes;
    List<ProxyType> unallowedProxyTypes;
    List<string> allowedWordlistTypes;
    List<string> unallowedWordlistTypes;
    List<string> quitBrowserStatuses;
    List<string> dontQuitBrowserStatuses;
    private bool showRegexHelper = false;

    protected override void OnInitialized()
    {
        settings = ConfigService.SelectedConfig.Settings;

        // HACK: I tried binding directly to lists but it would spit out double the amount of values when deserializing the json
        // for some reason so this approach is working but it's not the best
        continueStatuses = settings.GeneralSettings.ContinueStatuses.ToList();
        stopStatuses = RuriLibSettings.GetStatuses()
            .Where(s => !continueStatuses.Contains(s)).ToList();

        proxyBanStatuses = settings.ProxySettings.BanProxyStatuses.ToList();
        proxyContinueStatuses = RuriLibSettings.GetStatuses()
            .Where(s => !proxyBanStatuses.Contains(s)).ToList();

        allowedProxyTypes = settings.ProxySettings.AllowedProxyTypes.ToList();
        unallowedProxyTypes = Enum.GetValues(typeof(ProxyType))
            .Cast<ProxyType>().Where(t => !allowedProxyTypes.Contains(t)).ToList();

        allowedWordlistTypes = settings.DataSettings.AllowedWordlistTypes.ToList();
        unallowedWordlistTypes = RuriLibSettings.Environment.WordlistTypes
            .Select(w => w.Name)
            .Where(w => !allowedWordlistTypes.Contains(w)).ToList();

        quitBrowserStatuses = settings.SeleniumSettings.QuitBrowserStatuses.ToList();
        dontQuitBrowserStatuses = RuriLibSettings.GetStatuses()
            .Where(s => !quitBrowserStatuses.Contains(s)).ToList();
    }

    void OnSelectionChanged(object value)
    {
        // HACK: Set all here since I don't want to make 1 method for each one
        settings.GeneralSettings.ContinueStatuses = continueStatuses.ToArray();
        settings.ProxySettings.BanProxyStatuses = proxyBanStatuses.ToArray();
        settings.ProxySettings.AllowedProxyTypes = allowedProxyTypes.ToArray();
        settings.DataSettings.AllowedWordlistTypes = allowedWordlistTypes.ToArray();
        settings.SeleniumSettings.QuitBrowserStatuses = quitBrowserStatuses.ToArray();
    }

    async Task RestoreDefaults()
    {
        if (await js.Confirm("Are you sure", "Do you want to restore the default settings?"))
        {
            ConfigService.SelectedConfig.Settings = new ConfigSettings();
            Nav.NavigateTo("/config/edit/settings");
        }
    }
}
