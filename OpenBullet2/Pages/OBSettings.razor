@page "/settings/openbullet"
@using OpenBullet2.Services
@using OpenBullet2.Helpers
@using OpenBullet2.Models.Settings
@using OpenBullet2.Shared.Forms 
@inject PersistentSettingsService PersistentSettings
@inject NavigationManager Nav
@inject IModalService Modal
@inject Microsoft.Extensions.Localization.IStringLocalizer<OBSettings> Loc
@attribute [Authorize(Roles = "Admin")]

<h1>@Loc["General"]</h1>
<EditForm Model="settings.GeneralSettings">

    <label>@Loc["NavigateOnEdit"]</label>
    <InputSelect @bind-Value="settings.GeneralSettings.ConfigSectionOnLoad">
        @foreach (var sect in Enum.GetNames(typeof(ConfigSection)))
        {
            <option value="@sect">@sect</option>
        }
    </InputSelect>
    <br />

    <label>@Loc["AutoSetRecommendedBots"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.AutoSetRecommendedBots" />
    <br />

    <label>@Loc["WarnConfigNotSaved"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.WarnConfigNotSaved" />
    <br />

    <label>@Loc["DefaultAuthor"]</label>
    <InputText style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.DefaultAuthor" />

    <label>@Loc["EnableJobLogging"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.EnableJobLogging" />
    <br />

    <label>@Loc["LogBufferSize"]</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.LogBufferSize" />

    <label>@Loc["LogToFile"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.LogToFile" />
    <br />

    <!-- Maybe move this to the actual relevant page -->
    <label>@Loc["IgnoreWordlistNameOnHitsDedupe"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.GeneralSettings.IgnoreWordlistNameOnHitsDedupe" />
    <br />

    <label style="color: orange;">@Loc["ProxyCheckTargets"]</label>
    <br />
    <p>@Loc["ProxyCheckTargetsDescription"]</p>
    <div class="list-group list-group-horizontal">
        <button type="button" class="btn-sm btn-success" @onclick="@(() => settings.GeneralSettings.ProxyCheckTargets.Add(new ProxyCheckTarget()))">
            <span class="oi oi-plus"></span> @Loc["Add"]
        </button>
        <button type="button" class="btn-sm btn-danger"
                @onclick="@(() => settings.GeneralSettings.ProxyCheckTargets.Clear())">
            <span class="oi oi-x"></span> @Loc["Clear"]
        </button>
    </div>
    <div class="container-fluid" style="margin-top: 15px;">
        @foreach (var input in settings.GeneralSettings.ProxyCheckTargets)
        {
            <div class="row" style="margin-bottom: 15px;">
                <div class="col-8">
                    <label>@Loc["URL"]</label>
                    <InputText @bind-Value="input.Url" />
                </div>
                <div class="col-3">
                    <label>@Loc["SuccessKey"]</label>
                    <InputText @bind-Value="input.SuccessKey" />
                </div>
                <div class="col-1">
                    <button type="button" class="btn-sm btn-primary" @onclick="@(() => settings.GeneralSettings.ProxyCheckTargets.Remove(input))">
                        <span class="oi oi-minus"></span>
                        @Loc["Remove"]
                    </button>
                </div>
            </div>
        }
    </div>

</EditForm>

<h1>@Loc["Security"]</h1>
<EditForm Model="settings.SecuritySettings">

    <label>@Loc["AllowSystemWideFileAccess"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SecuritySettings.AllowSystemWideFileAccess" />
    <br />

    <label>@Loc["RequireAdminLogin"]</label>
    <InputCheckbox style="margin-bottom: 15px;" @bind-Value="settings.SecuritySettings.RequireAdminLogin" />
    <br />

    <label>@Loc["AdminUsername"]</label>
    <InputText style="margin-bottom: 15px;" @bind-Value="settings.SecuritySettings.AdminUsername" />
    <button class="btn btn-primary" @onclick="ChangePassword">Change password</button>

    <label>@Loc["AdminSessionLifetimeHours"]</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.SecuritySettings.AdminSessionLifetimeHours" />

    <label>@Loc["GuestSessionLifetimeHours"]</label>
    <InputNumber style="margin-bottom: 15px;" @bind-Value="settings.SecuritySettings.GuestSessionLifetimeHours" />

</EditForm>

<h1>@Loc["Remote"]</h1>
<EditForm Model="settings.RemoteSettings">
    <!-- Work in progress -->
</EditForm>

<button class="btn btn-success" style="margin: 10px 0;" @onclick="Save">@Loc["Save"]</button>
<button class="btn btn-warning" style="margin: 10px 0;" @onclick="RestoreDefaults">@Loc["RestoreDefaults"]</button>

@code {
    OpenBulletSettings settings;

    protected override void OnInitialized()
    {
        settings = PersistentSettings.OpenBulletSettings;
    }

    async Task RestoreDefaults()
    {
        if (await js.Confirm("Are you sure", "Do you want to restore the default settings?"))
        {
            PersistentSettings.Recreate();
            Nav.NavigateTo("/settings/openbullet");
        }
    }

    async Task Save()
    {
        try
        {
            await PersistentSettings.Save();
            await js.AlertSuccess("Saved", "The settings were successfully saved.");
        }
        catch (Exception ex)
        {
            await js.AlertError(ex.GetType().Name, ex.Message);
        }
    }

    async Task ChangePassword()
    {
        var modal = Modal.Show<NewPasswordForm>("New admin password");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            settings.SecuritySettings.SetupAdminPassword(result.Data as string);
            await js.AlertSuccess("Done", "The new passwords was set!");
        }
    }
}
