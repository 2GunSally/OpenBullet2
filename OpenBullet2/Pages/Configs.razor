@page "/configs"
@using Radzen.Blazor 
@using Radzen
@using OpenBullet2.Helpers
@using OpenBullet2.Models.Configs
@using OpenBullet2.Repositories
@using System.Web 
@inject IConfigRepository repo
@inject NavigationManager nav

<div class="container-fluid">
    <div class="row">
        <div class="list-group list-group-horizontal">
            <button class="btn-sm btn-success m-sm-1" @onclick="CreateConfig"><span class="oi oi-plus"></span> New</button>
            <button class="btn-sm btn-danger m-sm-1" @onclick="DeleteConfig"><span class="oi oi-x"></span> Delete</button>
            <button class="btn-sm btn-primary m-sm-1" @onclick="EditConfig"><span class="oi oi-pencil"></span> Edit</button>
            <button class="btn-sm btn-primary m-sm-1" @onclick="UploadConfig"><span class="oi oi-data-transfer-upload"></span> Upload</button>
            <button class="btn-sm btn-primary m-sm-1" @onclick="DownloadConfig"><span class="oi oi-data-transfer-download"></span> Download</button>
            <button class="btn-sm btn-secondary m-sm-1" @onclick="ReloadConfigs"><span class="oi oi-reload"></span> Reload</button>
            <button class="btn-sm btn-success m-sm-1" style="margin-left: 50px;" @onclick="ToggleView"><span class="oi oi-wrench"></span> Toggle View</button>
        </div>
    </div>
    <div class="row" style="margin-top: 30px;">
        @if (detailedView)
        {
            <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="30"
                        AllowSorting="true" Data="@configs" TItem="Config" ColumnWidth="200px" RowSelect="SelectConfig" RowDoubleClick="EditConfig">
                <Columns>
                    <RadzenGridColumn TItem="Config" Property="Metadata.Name" Title="Name" />
                    <RadzenGridColumn TItem="Config" Property="Metadata.Author" Title="Author" />
                    <RadzenGridColumn TItem="Config" Property="Metadata.Category" Title="Category" />
                    <RadzenGridColumn TItem="Config" Property="Settings.ProxySettings.UseProxies" Title="Proxies" />
                    <RadzenGridColumn TItem="Config" Property="Metadata.CreationDate" Title="Creation Date" />
                    <RadzenGridColumn TItem="Config" Property="Metadata.LastModified" Title="Last Modified" />
                </Columns>
            </RadzenGrid>
        }
        else
        {
            <RadzenDataList WrapItems="true" AllowPaging="true" Data="@configs" TItem="Config">
                <Template Context="config">
                    <RadzenCard Style="width:170px;">
                        <div style="background-color: @(config == selectedConfig ? "#111" : "transparent"); cursor: pointer; padding: 10px; border-radius: 10px;"
                             @onclick="@(() => SelectConfig(config))" @ondblclick="EditConfig">
                            <div class="row">
                                <img src="data:image/png;base64,@config.Metadata.Base64Image" style="width: 110px; height: 110px; margin: 0 20px 0 20px;" />
                            </div>
                            <div class="row">
                                <span class="text-center text-warning" style="width: 100%; font-size: 20px;">@config.Metadata.Name</span>
                            </div>
                            <div class="row">
                                <span class="text-center" style="width: 100%">by @config.Metadata.Author</span>
                            </div>
                            <div class="row">
                                <span class="text-center" style="width: 100%">@config.Metadata.LastModified.ToString("dd MMM yyyy")</span>
                            </div>
                        </div>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
        }
    </div>
</div>

@code {
    Config selectedConfig;
    List<Config> configs;
    bool detailedView = false;

    protected override async Task OnInitializedAsync()
    {
        if (Static.Configs == null)
            await ReloadConfigs();

        if (configs == null)
            configs = Static.Configs;

        if (Static.Config != null)
            selectedConfig = Static.Config;
    }

    private async Task ReloadConfigs()
    {
        Static.Configs = await repo.GetAll();
        configs = Static.Configs;
    }

    private void SelectConfig(Config config)
    {
        selectedConfig = config;
    }

    private async Task CreateConfig()
    {
        selectedConfig = await repo.Create();
        configs.Add(selectedConfig);
        Static.Config = selectedConfig;
        nav.NavigateTo("config/edit/stacker");
    }

    private async Task DeleteConfig()
    {
        if (selectedConfig == null)
        {
            await ShowNoConfigSelectedMessage();
            return;
        }

        if (await js.Confirm("Are you sure?", $"Do you really want to delete {selectedConfig.Metadata.Name}?"))
        {
            repo.Delete(selectedConfig);
            configs.Remove(selectedConfig);

            if (Static.Config == selectedConfig)
                Static.Config = null;

            selectedConfig = null;
        }
    }

    private async Task EditConfig()
    {
        if (selectedConfig == null)
        {
            await ShowNoConfigSelectedMessage();
            return;
        }

        Static.Config = selectedConfig;
        nav.NavigateTo("config/edit/metadata");
    }

    private async Task ShowNoConfigSelectedMessage()
        => await js.AlertError("404", "It looks like you didn't select any config!");


    private async Task DownloadConfig()
    {
        if (selectedConfig == null)
        {
            await ShowNoConfigSelectedMessage();
            return;
        }

        nav.NavigateTo($"api/configs/download/{HttpUtility.UrlEncode(selectedConfig.Id)}", true);
    }

    private void UploadConfig() { }

    private void ToggleView() => detailedView = !detailedView;
}
