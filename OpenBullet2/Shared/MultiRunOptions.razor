@using OpenBullet2.Models.Jobs
@using RuriLib.Models.Jobs
@using OpenBullet2.Shared.Forms
@using RuriLib.Models.Configs
@using RuriLib.Services
@inject RuriLibSettingsService RuriLibSettings
@inject IRecordRepository RecordRepo
@inject IModalService Modal
@inject IConfigRepository ConfigRepo
@inject Microsoft.Extensions.Localization.IStringLocalizer<MultiRunOptions> Loc

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <label class="fg-custom">@Loc["StartCondition"]</label>
            <div class="mb-3">
                <StartConditionSelector StartCondition="Options.StartCondition" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <EditForm Model="Options">
                <label class="fg-custom">@Loc["Config"]</label>
                @if (selectedConfig == null)
                {
                    <p>@Loc["NoConfigSelected"]</p>
                }
                else
                {
                    <div style="width: 55px; height: 55px;" class="my-3">
                        <img src="data:image/png;base64,@selectedConfig.Metadata.Base64Image" class="w-100 h-100" />
                    </div>
                    <p>@selectedConfig.Metadata.Name @Loc["by"] @selectedConfig.Metadata.Author</p>
                }
                <button class="btn btn-outline-primary mb-3" @onclick="SelectConfig">@Loc["SelectConfig"]</button>
                <br />
                <label class="mt-3">@Loc["ProxyMode"]</label>
                <InputSelect @bind-Value="Options.ProxyMode">
                    @foreach (var name in Enum.GetNames(typeof(JobProxyMode)))
                    {
                        <option value="@name">@name</option>
                    }
                </InputSelect>
                <br />
                <div style="max-width: 100px;">
                    <label style="margin-top: 15px;">@Loc["Bots"]</label>
                    <InputNumber @bind-Value="Options.Bots" />
                </div>
                <div style="max-width: 100px;">
                    <label>@Loc["Skip"]</label>
                    <InputNumber @bind-Value="Options.Skip" />
                </div>
            </EditForm>
        </div>
        <div class="col-lg-6">
            <label class="fg-custom mt-3">@Loc["DataPool"]</label>
            <DataPoolSelector Options="Options.DataPool" SetOptions="((options) => Options.DataPool = options)"
                              SetWordlist="(async _ => await TryApplyRecord())"/>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <label class="fg-custom mt-3">@Loc["ProxySources"]</label>
            <ProxySourceSelector ProxySources="Options.ProxySources" />
        </div>
        <div class="col-lg-6">
            <label class="fg-custom mt-3">@Loc["HitOutputs"]</label>
            <HitOutputsSelector HitOutputs="Options.HitOutputs" />
        </div>
    </div>
</div>

@code {
    [Parameter] public MultiRunJobOptions Options { get; set; }
    Config selectedConfig;

    protected override async Task OnParametersSetAsync()
    {
        // We're in edit mode, set the config
        if (!string.IsNullOrEmpty(Options.ConfigId))
        {
            selectedConfig = await ConfigRepo.Get(Options.ConfigId);
        }

        // Refresh the radio buttons
    }

    async Task SelectConfig()
    {
        var modal = Modal.Show<ConfigSelector>(Loc["SelectConfig"]);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            selectedConfig = result.Data as Config;
            Options.ConfigId = selectedConfig.Id;
            await TryApplyRecord();
        }
    }

    async Task TryApplyRecord()
    {
        if (Options.DataPool is OpenBullet2.Models.Data.WordlistDataPoolOptions pool)
        {
            var record = await RecordRepo.GetAll()
                .FirstOrDefaultAsync(r => r.ConfigId == Options.ConfigId && r.WordlistId == pool.WordlistId);

            if (record != null)
                Options.Skip = record.Checkpoint;
        }
    }
}