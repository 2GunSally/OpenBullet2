@using OpenBullet2.Models.Jobs
@using RuriLib.Models.Jobs
@using OpenBullet2.Shared.Forms
@using RuriLib.Models.Configs
@using RuriLib.Services
@inject RuriLibSettingsService RuriLibSettings
@inject IModalService Modal

<label style="color: orange;">Start Condition</label>
<br />
<div style="margin-bottom: 20px;">
    <StartConditionSelector StartCondition="Options.StartCondition" />
</div>

<EditForm Model="Options">
    <label style="color: orange;">Config</label>
    @if (selectedConfig == null)
    {
        <p>No config selected</p>
    }
    else
    {
        <div style="width: 55px; height: 55px; margin: 0 20px 0 20px;">
            <img src="data:image/png;base64,@selectedConfig.Metadata.Base64Image" style="width: 100%; height: 100%;" />
        </div>
        <p>@selectedConfig.Metadata.Name by @selectedConfig.Metadata.Author</p>
    }
    <button class="btn btn-primary" style="margin-bottom: 20px;" @onclick="SelectConfig">Select Config</button>
    <br />
    <label style="margin-top: 15px;">Proxy Mode</label>
    <InputSelect @bind-Value="Options.ProxyMode">
        @foreach (var name in Enum.GetNames(typeof(JobProxyMode)))
        {
            <option value="@name">@name</option>
        }
    </InputSelect>
    <br />
    <div style="width: 100px;">
        <label style="margin-top: 15px;">Bots</label>
        <InputNumber @bind-Value="Options.Bots" />
    </div>
    <div style="width: 100px;">
        <label>Skip</label>
        <InputNumber @bind-Value="Options.Skip" />
    </div>
</EditForm>

<label style="color: orange; margin-top: 20px;">Proxy Source</label>
<ProxySourceSelector Options="Options.ProxySource" SetOptions="((options) => Options.ProxySource = options)" />

<label style="color: orange; margin-top: 20px;">Data Pool</label>
<DataPoolSelector Options="Options.DataPool" SetOptions="((options) => Options.DataPool = options)" />

<label style="color: orange; margin-top: 20px;">Hit Outputs</label>
<HitOutputsSelector HitOutputs="Options.HitOutputs" />

@code {
    [Parameter] public MultiRunJobOptions Options { get; set; }
    Config selectedConfig;

    async Task SelectConfig()
    {
        var modal = Modal.Show<ConfigSelector>("Select Config");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            selectedConfig = result.Data as Config;
            Options.ConfigId = selectedConfig.Id;
        }
    }
}