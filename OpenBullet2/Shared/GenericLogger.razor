<div class="generic-log" style="margin-bottom: 30px;">
    @lock (listLock)
    {
        foreach (var entry in entries)
        {
            <span style="color: @entry.Color;">@entry.Message</span><br />
        }
    }
</div>

@code {
    [Parameter] public int BufferSize { get; set; } = 20;
    List<LogEntry> entries = new List<LogEntry>();
    object listLock = new object();

    public void Log(LogKind kind, string message, string color)
    {
        var entry = $"[{DateTime.Now.ToLongTimeString()}] {message.Replace("\r\n", " ").Replace("\n", " ")}";
        lock (listLock)
        {
            entries.Insert(0, new LogEntry(entry, color));

            if (entries.Count > BufferSize)
                entries.RemoveAt(entries.Count - 1);
        }
        InvokeAsync(StateHasChanged);
    }

    public void LogInfo(string message) { Log(LogKind.Info, message, "white"); }
    public void LogSuccess(string message) { Log(LogKind.Success, message, "greenyellow"); }
    public void LogWarning(string message) { Log(LogKind.Warning, message, "orange"); }
    public void LogError(string message) { Log(LogKind.Error, message, "tomato"); }
    public void Clear() { entries.Clear(); }

    public enum LogKind
    {
        Info,
        Success,
        Warning,
        Error
    }

    struct LogEntry
    {
        public string Message { get; set; }
        public string Color { get; set; }

        public LogEntry(string message, string color)
        {
            Message = message;
            Color = color;
        }
    }
}
