@using OpenBullet2.Models
@using OpenBullet2.Helpers

    <div class="list-group list-group-horizontal">
        <button class="btn-sm btn-success m-sm-1"><span class="oi oi-plus"></span> Add</button>
        <button class="btn-sm btn-danger m-sm-1" @onclick="DeleteSelectedBlock"><span class="oi oi-x"></span> Delete</button>
    </div>


@foreach (var block in Stack)
{
    <div draggable="true" class="card" style="background-color: @BlockBuilder.GetBGColor(block.Info.Category); 
         cursor: pointer; margin-top: 5px; border: solid 3px #000;"
         @ondragstart="@(() => HandleDragStart(block))"
         @ondragover="@(() => HandleDragOver(block))"
         @onclick="@(() => SelectBlock(block))">
        <div class="card-body">
            <h5 class="card-title @(block == selectedBlock ? "font-weight-bold;" : "")" 
                style="color: @BlockBuilder.GetFGColor(block.Info.Category);">@block.Settings.Label</h5>
        </div>
    </div>
}

@code {
    [Parameter] public List<BlockInstance> Stack { get; set; }
    [Parameter] public EventCallback<BlockInstance> SelectedBlock { get; set; }
    private BlockInstance draggedItem;
    private BlockInstance selectedBlock;

    private void HandleDragStart(BlockInstance item)
    {
        draggedItem = item;
    }

    private void HandleDragOver(BlockInstance item)
    {
        if (!item.Equals(draggedItem))
        {
            Stack.Remove(draggedItem);
            Stack.Insert(Stack.IndexOf(item), draggedItem);
        }
    }

    private void SelectBlock(BlockInstance item)
    {
        selectedBlock = item;
        SelectedBlock.InvokeAsync(item);
    }

    private void DeleteSelectedBlock()
    {
        if (selectedBlock == null)
            return;

        Stack.Remove(selectedBlock);
        SelectBlock(null);
    }
}
