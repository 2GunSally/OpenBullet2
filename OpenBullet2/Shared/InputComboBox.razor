<InputText class="@InputTextCssClass"
           @onfocus="ShowSuggestions"
           @onfocusout="HideSuggestions"
           @oninput="RefreshSuggestions"
           Value="@Value"
           ValueExpression="() => Value"
           ValueChanged="e => OnValueChanged(e)"/>
<div class="suggestions-container @(showSuggestions ? "visible" : "invisible")">
  <div class="input-suggestions">
    @foreach (var option in suggestions)
    {
      <div class="suggestion-item" @onclick="() => SetVariable(option)">
        @option
      </div>
    }
  </div>
</div>

@code {

  [Parameter] public string Value { get; set; }

  [Parameter] public Func<string, Task<IEnumerable<string>>> GetSuggestions { get; set; }
  [Parameter] public EventCallback<string> ValueChanged { get; set; }
  [Parameter] public string InputTextCssClass { get; set; }
  private string[] suggestions = { };
  private bool showSuggestions = false;

  private async Task ShowSuggestions()
  {
    showSuggestions = true;
    suggestions = (await GetSuggestions.Invoke(Value)).ToArray();
    await InvokeAsync(StateHasChanged);
  }

  private async Task RefreshSuggestions(ChangeEventArgs e)
  {
    suggestions = (await GetSuggestions.Invoke(e.Value.ToString())).ToArray();
    await InvokeAsync(StateHasChanged);
  }

  private async Task HideSuggestions()
  {
    // Needed because otherwise onfocusout wins over onclick
    await Task.Delay(100);

    if (showSuggestions)
    {
      showSuggestions = false;
      await InvokeAsync(StateHasChanged);
    }
  }

  private async Task SetVariable(string value)
  {
    Value = value;
    showSuggestions = false;
    await InvokeAsync(StateHasChanged);
    await ValueChanged.InvokeAsync(value);
  }

  private Task OnValueChanged(string newValue)
  {
    Value = newValue;
    return ValueChanged.InvokeAsync(newValue);
  }

}