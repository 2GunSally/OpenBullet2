@using RuriLib.Models.Blocks.Settings
@using RuriLib.Models.Blocks.Custom.Keycheck
@using RuriLib.Services
@inject RuriLibSettingsService RuriLibSettings 

<div class="container-fluid"
     style="background-color: @GetBGColor()">
    <div class="row">
        <EditForm Model="Keychain">
            <label>Result Status:</label>
            <InputSelect @bind-Value="Keychain.ResultStatus">
                @foreach (var status in RuriLibSettings.GetStatuses())
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </EditForm>
        <EditForm Model="Keychain">
            <label>Mode:</label>
            <InputSelect @bind-Value="Keychain.Mode">
                @foreach (var mode in Enum.GetNames(typeof(KeychainMode)))
                {
                    <option value="@mode">@mode</option>
                }
            </InputSelect>
        </EditForm>
    </div>
    <div class="row">
        <div class="list-group list-group-horizontal">
            <button class="btn-sm btn-success m-sm-1" @onclick="(() => Keychain.Keys.Add(new StringKey()))"><span class="oi oi-plus"></span> String Key</button>
            <button class="btn-sm btn-success m-sm-1" @onclick="(() => Keychain.Keys.Add(new IntKey()))"><span class="oi oi-plus"></span> Int Key</button>
            <button class="btn-sm btn-success m-sm-1" @onclick="(() => Keychain.Keys.Add(new FloatKey()))"><span class="oi oi-plus"></span> Float Key</button>
            <button class="btn-sm btn-success m-sm-1" @onclick="(() => Keychain.Keys.Add(new ListKey()))"><span class="oi oi-plus"></span> List Key</button>
            <button class="btn-sm btn-success m-sm-1" @onclick="(() => Keychain.Keys.Add(new DictionaryKey()))"><span class="oi oi-plus"></span> Dictionary Key</button>
        </div>
    </div>
    @foreach (var key in Keychain.Keys)
    {
        <div class="row">
            <div class="col-10 no-padding">
                @switch (key)
                {
                    case StringKey x:
                        <KeycheckStringKey Key="key as StringKey" />
                        break;

                    case IntKey x:
                        <KeycheckIntKey Key="key as IntKey" />
                        break;

                    case FloatKey x:
                        <KeycheckFloatKey Key="key as FloatKey" />
                        break;

                    case ListKey x:
                        <KeycheckListKey Key="key as ListKey" />
                        break;

                    case DictionaryKey x:
                        <KeycheckDictionaryKey Key="key as DictionaryKey" />
                        break;
                }
            </div>
            <div class="col-2">
                <button type="button" class="btn-sm btn-danger" @onclick="@(() => Keychain.Keys.Remove(key))">
                <span class="oi oi-x"></span></button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Keychain Keychain { get; set; }

    private string GetBGColor()
    {
        return Keychain.ResultStatus switch
        {
            "SUCCESS" => "#006600",
            "FAIL" => "#660000",
            "RETRY" => "#666600",
            "BAN" => "#660066",
            "NONE" => "000066",
            _ => "#c04000"
        };
    }
}
