@using OpenBullet2.Services
@using RuriLib.Models.Configs
@using OpenBullet2.Helpers
@inject ConfigService ConfigService
@inject IModalService ModalService

<div class="container-fluid" style="overflow-y: auto; width: 1000px;">
    <div class="row" style="height: 500px;">
        <div class="col-6">
            <ul style="list-style: none; padding: unset;">
                @foreach (var config in ConfigService.Configs)
                {
                    <li>
                        <div style="cursor: pointer; 
                             @(selectedConfig == config ? "background-color: #111" : "")" 
                             @onclick="@(() => selectedConfig = config)"
                             @ondblclick="Select">
                            <span>@config.Metadata.Name by @config.Metadata.Author</span>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="col-6">
            @if (selectedConfig != null)
            {
                <p>@selectedConfig.Metadata.Name by @selectedConfig.Metadata.Author</p>
                <MarkdownRenderer MarkdownContent="@selectedConfig.Readme" />
            }
        </div>
    </div>
    <div class="row">
        <button class="btn btn-success" @onclick="Select">Select</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    Config selectedConfig;

    void Preview(Config config)
    {

    }

    async Task Select()
    {
        if (selectedConfig == null)
        {
            await js.AlertError("Uh-oh", "You must select a config first");
            return;
        }

        BlazoredModal.Close(ModalResult.Ok(selectedConfig));
    }
}
