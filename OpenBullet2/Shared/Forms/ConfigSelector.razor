@using OpenBullet2.Services
@using RuriLib.Models.Configs
@using OpenBullet2.Helpers
@inject ConfigService ConfigService
@inject IModalService ModalService
@inject Microsoft.Extensions.Localization.IStringLocalizer<ConfigSelector> Loc

<div style="overflow-y: auto; width: 1000px;">
    <div style="height: 250px; overflow-y: auto;">
        <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
                    AllowSorting="true" Data="@ConfigService.Configs" TItem="Config" ColumnWidth="130px"
                    RowSelect="Preview" RowDoubleClick="Select">
            <Columns>
                <RadzenGridColumn TItem="Config" Property="Metadata.Name" Title="@Loc["Name"]" />
                <RadzenGridColumn TItem="Config" Property="Metadata.Author" Title="@Loc["Author"]" />
                <RadzenGridColumn TItem="Config" Property="Metadata.Category" Title="@Loc["Category"]" />
                <RadzenGridColumn TItem="Config" Property="Settings.ProxySettings.UseProxies" Title="@Loc["Proxies"]" />
                <RadzenGridColumn TItem="Config" Property="Metadata.LastModified" Title="@Loc["LastModified"]" />
            </Columns>
        </RadzenGrid>
    </div>
    <div style="height: 250px; margin-top: 15px; overflow-y: auto;">
        @if (selectedConfig != null)
        {
            <div style="width: 100%">
                <p style="color: orange;">@selectedConfig.Metadata.Name @Loc["by"] @selectedConfig.Metadata.Author</p>
            </div>
            <div style="width: 100%">
                <MarkdownRenderer MarkdownContent="@selectedConfig.Readme" />
            </div>
        }
    </div>
    <div>
        <button class="btn btn-outline-success" @onclick="Select">@Loc["Select"]</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    Config selectedConfig;

    void Preview(Config config)
    {
        selectedConfig = config;
    }

    async Task Select()
    {
        if (selectedConfig == null)
        {
            await js.AlertError(Loc["Uh-Oh"], Loc["NoConfigSelected"]);
            return;
        }

        BlazoredModal.Close(ModalResult.Ok(selectedConfig));
    }
}
