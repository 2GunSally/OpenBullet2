@using RuriLib.Models.Jobs.Monitor.Triggers
@inject IModalService ModalService
@inject Microsoft.Extensions.Localization.IStringLocalizer<TriggerEdit> Loc 

<EditForm Model="Trigger">
    @switch (Trigger)
    {
        case HitCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Hits"]</span>
            <InputIntComparison Label="Hit Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case CustomCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Customs"]</span>
            <InputIntComparison Label="Custom Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case ToCheckCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["ToChecks"]</span>
            <InputIntComparison Label="ToCheck Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case BanCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Bans"]</span>
            <InputIntComparison Label="Ban Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case RetryCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Retries"]</span>
            <InputIntComparison Label="Retry Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case ErrorCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Errors"]</span>
            <InputIntComparison Label="Error Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case FailCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Fails"]</span>
            <InputIntComparison Label="Fail Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case TestedCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Tested"]</span>
            <InputIntComparison Label="Tested Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case AliveProxiesCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["AliveProxies"]</span>
            <InputIntComparison Label="Alive Proxies Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case BannedProxiesCountTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["BannedProxies"]</span>
            <InputIntComparison Label="Banned Proxies Count" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case JobFinishedTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["JobFinished"]</span>
            break;

        case JobStatusTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["JobStatus"]</span>
            <InputSelect @bind-Value="t.Status">
                @foreach (var status in Enum.GetNames(typeof(RuriLib.Models.Jobs.Threading.TaskManagerStatus)))
                        {
                    <option value="@status">@status</option>
                        }
            </InputSelect>
            break;

        case CPMTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["CPM"]</span>
            <InputIntComparison Label="CPM" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case CaptchaCreditTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["CaptchaCredit"]</span>
            <InputFloatComparison Label="CPM" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case ProgressTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["Progress"]</span>
            <InputFloatComparison Label="CPM" @bind-Amount="t.Amount" @bind-Comparison="t.Comparison" />
            break;

        case TimeElapsedTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["TimeElapsed"]</span>
            <InputSelect @bind-Value="t.Comparison">
                @foreach (var comp in Enum.GetNames(typeof(RuriLib.Models.Conditions.Comparisons.NumComparison)))
                        {
                    <option value="@comp">@comp</option>
                        }
            </InputSelect>
            <InputNumber @bind-Value="t.Days" /> @Loc["days"]
            <InputNumber @bind-Value="t.Hours" /> @Loc["hours"]
            <InputNumber @bind-Value="t.Minutes" /> @Loc["minutes"]
            <InputNumber @bind-Value="t.Seconds" /> @Loc["seconds"]
            break;

        case TimeRemainingTrigger t:
            <span>@Loc["TriggerWhen"] </span><span>@Loc["TimeRemaining"]</span>
            <InputSelect @bind-Value="t.Comparison">
                @foreach (var comp in Enum.GetNames(typeof(RuriLib.Models.Conditions.Comparisons.NumComparison)))
                        {
                    <option value="@comp">@comp</option>
                        }
            </InputSelect>
            <InputNumber @bind-Value="t.Days" /> @Loc["days"]
            <InputNumber @bind-Value="t.Hours" /> @Loc["hours"]
            <InputNumber @bind-Value="t.Minutes" /> @Loc["minutes"]
            <InputNumber @bind-Value="t.Seconds" /> @Loc["seconds"]
            break;
    }
</EditForm>

<button class="btn btn-success" @onclick="(() => BlazoredModal.Close())">@Loc["Ok"]</button>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public Trigger Trigger { get; set; }
}
