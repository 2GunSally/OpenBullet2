@using Blazor.FileReader 
@using OpenBullet2.Entities
@using OpenBullet2.Helpers
@using System.IO
@using RuriLib.Extensions 
@using RuriLib.Services 
@using OpenBullet2.Services 
@inject IModalService ModalService
@inject IWordlistRepository WordlistRepo
@inject IFileReaderService FileReaderService
@inject RuriLibSettingsService RuriLibSettings
@inject PersistentSettingsService PersistentSettings

<EditForm Model="wordlist">
    <label style="margin-top: 10px;">Wordlist Type</label>
    <InputSelect @bind-Value="wordlist.Type">
        @foreach (var type in wordlistTypes)
        {
            <option value="@type">@type</option>
        }
    </InputSelect><br />
    <label>Name</label>
    <InputText @bind-Value="wordlist.Name" />
    <label style="margin-top: 10px;">Purpose</label>
    <InputText @bind-Value="wordlist.Purpose" />
    <hr style="margin-top: 10px;" />
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Upload">
                <input type="file" @ref=inputTypeFileElement @onchange="ProcessUploadedWordlist" />
                <br />
                <br />
                <progress max="@max" value="@value" /><span style="margin-left: 15px;">@(progress.ToString("F"))% Uploaded</span>
                <br />
                <button type="button" class="btn btn-success" style="margin-top: 10px;" @onclick="Upload">Upload</button>
            </RadzenTabsItem>
            <RadzenTabsItem Text="File System">
                <label>Base Directory</label>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <button class="btn btn-success" style="height: 30px; line-height: 10px;"
                                @onclick="@(() => LoadTree(baseDirectory))">Ok</button>
                    </div>
                    <div style="width: 80%">
                        <InputText @bind-Value="baseDirectory" />
                    </div>
                </div>
                <RadzenTree Change="@LogChange" Data="@entries" Expand="@LoadFiles" Style="width: 100%; height: 300px">
                    <RadzenTreeLevel Text="@GetTextForNode" Template="@FileOrFolderTemplate" />
                </RadzenTree>
                <p>Selected file: @selectedFile</p>
                <button type="button" class="btn btn-success" style="margin-top: 10px;" @onclick="SelectFile">Select</button>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</EditForm>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    ElementReference inputTypeFileElement;
    List<string> wordlistTypes;
    WordlistEntity wordlist;
    MemoryStream fileStream;
    long max;
    long value;
    decimal progress;
    string baseDirectory = ".";
    string selectedFile = "";
    IEnumerable<string> entries = null;
    bool valid = false;

    protected override async Task OnInitializedAsync()
    {
        wordlistTypes = RuriLibSettings.Environment.WordlistTypes.Select(w => w.Name).ToList();

        wordlist = new WordlistEntity
        {
            Name = "My Wordlist",
            Type = wordlistTypes.First()
        };

        await LoadTree(baseDirectory);
    }

    private async Task ProcessUploadedWordlist()
    {
        max = 0;
        value = 0;
        this.StateHasChanged();
        var files = (await FileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync()).ToList();
        var file = files.FirstOrDefault();

        if (file == null)
            return;

        var fileInfo = await file.ReadFileInfoAsync();
        max = fileInfo.Size;
        this.StateHasChanged();

        using (var fs = await file.OpenReadAsync())
        {
            var buffer = new byte[20480];
            fileStream = new MemoryStream();
            int count;
            while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
            {
                value += count;
                progress = ((decimal)fs.Position * 100) / fs.Length;
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
                await fileStream.WriteAsync(buffer, 0, count);
            }
        }
        this.StateHasChanged();
        valid = true;
    }

    async Task LoadTree(string baseDirectory)
    {
        if (!Directory.Exists(baseDirectory))
        {
            await js.AlertError("404", "That directory does not exist");
            return;
        }

        if (!PersistentSettings.SecurityOptions.AllowSystemWideFileAccess && !baseDirectory.IsSubPathOf(Directory.GetCurrentDirectory()))
        {
            await js.AlertError("Unauthorized", "System wide file access has been disabled in appsettings.json");
            return;
        }

        entries = Directory.GetDirectories(baseDirectory)
                           .Where(entry =>
                           {
                               var name = Path.GetFileName(entry);

                               return !name.StartsWith(".") && name != "bin" && name != "obj";
                           });
    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;

        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;
    }

    void LogChange(TreeEventArgs args)
    {
        selectedFile = args.Value as string;

        // Make sure it's a file
        if (File.Exists(selectedFile))
            valid = true;
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", isDirectory ? "folder" : "insert_drive_file");
        if (!isDirectory)
        {
            builder.AddAttribute(2, "Style", "margin-left: 24px");
        }
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

    private async Task Upload()
    {
        if (!valid)
        {
            await js.AlertError("Uh-oh", "You must upload a file first!");
            return;
        }

        await WordlistRepo.Add(wordlist, fileStream);
        BlazoredModal.Close(ModalResult.Ok(wordlist));
    }

    private async Task SelectFile()
    {
        if (!valid)
        {
            await js.AlertError("Uh-oh", "You must select a file first!");
            return;
        }

        wordlist.FileName = selectedFile;
        wordlist.Total = File.ReadLines(selectedFile).Count();
        await WordlistRepo.Add(wordlist);
        BlazoredModal.Close(ModalResult.Ok(wordlist));
    }
}
