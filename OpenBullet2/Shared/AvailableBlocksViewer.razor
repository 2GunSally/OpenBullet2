@using RuriLib.Models.Blocks
@using RuriLib.Models.Trees

@if (!currentNode.IsRoot)
{
<button type="button" class="btn btn-outline-success" @onclick="GoBack">Back</button>}

@if (currentNode.SubCategories.Count > 0)
{
    <GenericList List="currentNode.SubCategories">
        <ElementTemplate Context="node">
            <div class="card" style="background-color: @GetCategory(node).BackgroundColor; cursor: pointer; margin-top: 5px; border: solid 3px #000;"
                 @onclick="@(() => SelectSubCategory(node))">
                <div class="card-body" style="color: @GetCategory(node).ForegroundColor;">
                    <h5 class="card-text">@GetCategory(node).Name</h5>
                </div>
            </div>
        </ElementTemplate>
    </GenericList>
}

@if (currentNode.Descriptors.Count > 0)
{
    <GenericList List="currentNode.Descriptors">
        <ElementTemplate Context="descriptor">
            <div style="margin-top: 5px"></div>
            <IndividualDescriptor Descriptor="descriptor" SelectedDescriptor="SelectedDescriptor" />
        </ElementTemplate>
    </GenericList>
}

@code 
{     
    [Parameter] public EventCallback<BlockDescriptor> SelectedDescriptor { get; set; }
    private CategoryTreeNode currentNode;

    protected override void OnInitialized()
    {
        var root = RuriLib.Globals.DescriptorsRepository.AsTree();
        currentNode = root
            .SubCategories.First(s => s.Name == "RuriLib")
            .SubCategories.First(s => s.Name == "Blocks");
    }

    private void SelectSubCategory(CategoryTreeNode subCategory)
    {
        currentNode = subCategory;
    }

    private void GoBack()
    {
        if (!currentNode.IsRoot)
            currentNode = currentNode.Parent;
    }

    private BlockCategory GetCategory(CategoryTreeNode node)
    {
        if (node.Descriptors.Count > 0)
            return node.Descriptors.First().Category;

        var category = GetCategory(node.SubCategories.First());
        category.Name = node.Name;
        return category;
    }
}
