@using RuriLib.Models.Blocks.Custom
@using RuriLib.Models.Blocks.Custom.HttpRequest
@inject Microsoft.Extensions.Localization.IStringLocalizer<HttpRequestBlockSettingsViewer> Loc

<EditForm Model="Block">
    <h6 class="font-weight-bold fg-custom">@Loc["Label"]:</h6>
    <InputText Value="@Block.Label" ValueExpression="@(() => Block.Label)"
               ValueChanged="@((value) => { Block.Label = value; ChangedLabel.InvokeAsync(EventArgs.Empty); })" />
</EditForm>

<h6 class="font-weight-bold fg-custom mt-3">@Loc["Settings"]:</h6>
<BlockInputField BlockSetting="@Block.Settings["url"]" />
<BlockInputField BlockSetting="@Block.Settings["method"]" />
<BlockInputField BlockSetting="@Block.Settings["autoRedirect"]" />

<RadzenRadioButtonList @bind-Value="type" TValue="RequestParamsType" Change="@((args) => Change(args))">
    <Items>
        <RadzenRadioButtonListItem Text="Standard" Value="RequestParamsType.Standard" />
        <RadzenRadioButtonListItem Text="Raw" Value="RequestParamsType.Raw" />
        <RadzenRadioButtonListItem Text="Basic Auth" Value="RequestParamsType.BasicAuth" />
        <RadzenRadioButtonListItem Text="Multipart" Value="RequestParamsType.Multipart" />
    </Items>
</RadzenRadioButtonList>
<br />

<EditForm Model="Block">
    @switch (Block.RequestParams)
    {
        case StandardRequestParams x:
            <BlockInputField BlockSetting="x.Content" />
            <BlockInputField BlockSetting="x.ContentType" />
            break;

        case RawRequestParams x:
            <BlockInputField BlockSetting="x.Content" />
            <BlockInputField BlockSetting="x.ContentType" />
            break;

        case BasicAuthRequestParams x:
            <BlockInputField BlockSetting="x.Username" />
            <BlockInputField BlockSetting="x.Password" />
            break;

        case MultipartRequestParams x:
            <BlockInputField BlockSetting="x.Boundary" />
            <MultipartSettingsViewer Contents="x.Contents" />
            break;
    }
</EditForm>

<BlockInputField BlockSetting="@Block.Settings["customCookies"]" />
<BlockInputField BlockSetting="@Block.Settings["customHeaders"]" />
<BlockInputField BlockSetting="@Block.Settings["timeoutMilliseconds"]" />

<h6 class="font-weight-bold fg-custom mt-3">@Loc["AdvancedSettings"]:</h6>
<BlockInputField BlockSetting="@Block.Settings["httpVersion"]" />
<BlockInputField BlockSetting="@Block.Settings["securityProtocol"]" />
<BlockInputField BlockSetting="@Block.Settings["useCustomCipherSuites"]" />
<BlockInputField BlockSetting="@Block.Settings["customCipherSuites"]" />

<br />
<BullettaHelp Title="@help1x00" Messages="new string[] { help1x01, help1x02, help1x03, help1x04 }" />

@code {
    [Parameter] public HttpRequestBlockInstance Block { get; set; }
    [Parameter] public EventCallback ChangedLabel { get; set; }

    string help1x00 => Loc["Help1x00"];
    string help1x01 => Loc["Help1x01"];
    string help1x02 => Loc["Help1x02"];
    string help1x03 => Loc["Help1x03"];
    string help1x04 => Loc["Help1x04"];

    enum RequestParamsType
    {
        Standard,
        Raw,
        BasicAuth,
        Multipart
    }

    RequestParamsType type = RequestParamsType.Standard;

    protected override void OnParametersSet()
    {
        type = Block.RequestParams switch
        {
            StandardRequestParams _ => RequestParamsType.Standard,
            RawRequestParams _ => RequestParamsType.Raw,
            BasicAuthRequestParams _ => RequestParamsType.BasicAuth,
            MultipartRequestParams _ => RequestParamsType.Multipart,
            _ => throw new NotImplementedException()
        };
    }

    void Change(RequestParamsType? value)
    {
        if (value.HasValue)
        {
            Block.RequestParams = value.Value switch
            {
                RequestParamsType.Standard => new StandardRequestParams(),
                RequestParamsType.Raw => new RawRequestParams(),
                RequestParamsType.BasicAuth => new BasicAuthRequestParams(),
                RequestParamsType.Multipart => new MultipartRequestParams(),
                _ => throw new NotImplementedException()
            };
        }
    }
}